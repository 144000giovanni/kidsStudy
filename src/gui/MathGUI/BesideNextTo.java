/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.MathGUI;
import core.PaintImage;
import core.Stemmer;
import core.Coordinator;
import java.awt.Color;
import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.awt.image.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.imageio.ImageIO;
import java.awt.Image;
 import java.awt.Font;
import java.awt.Graphics2D;
import core.KJV;
import static core.PaintImage.image;
import java.awt.BorderLayout;
import java.awt.GraphicsEnvironment;
import java.awt.GraphicsDevice;
import java.awt.DisplayMode;
import java.awt.Graphics;

/**
 *
 * @author giovannisaberon
 */
public class BesideNextTo extends javax.swing.JFrame {
    List<String> usedWord = new ArrayList();
    HashMap<String, String> images = new HashMap<String, String>();
    HashMap<Integer, String> loopImages = new HashMap<>();
        HashMap<String, String> imagesBackground = new HashMap<String, String>();
    HashMap<Integer, String> loopImagesBackground = new HashMap<>();
    ImageIcon imageIcon;
    String imageDirectory;
    int topNumber;
    int middleNumber;
    int bottomNumber;
    int previousNumber = 0;


    /**
     * Creates new form Math
     */
    
    public BesideNextTo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        question_label = new javax.swing.JLabel();
        next_button = new javax.swing.JButton();
        backgroundPanel = new javax.swing.JPanel();
        top_image = new javax.swing.JLabel();
        middle_image = new javax.swing.JLabel();
        bottom_image = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        question_label.setText("Question");

        next_button.setText("Next");
        next_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                next_buttonActionPerformed(evt);
            }
        });

        backgroundPanel = new PaintImage("/resources/images/background/shelf.jpg");

        top_image.setText("Top");

        middle_image.setText("Middle");

        bottom_image.setText("Bottom");

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addGap(308, 308, 308)
                .addComponent(middle_image, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addContainerGap(474, Short.MAX_VALUE)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addComponent(bottom_image, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                        .addComponent(top_image, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(449, 449, 449))))
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(top_image, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(middle_image, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(bottom_image, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(question_label, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(557, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(next_button, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(question_label, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28)
                .addComponent(next_button, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void next_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_next_buttonActionPerformed
        // TODO add your handling code here:
        
        images = new HashMap<>();
        imageDirectory = "fruit_pics";
        images =Coordinator.ScienceGetImages("/resources/images/science/"+imageDirectory);   
        System.out.println(images.size());
        Set<String> imageKey = images.keySet();
        loopImages = new HashMap<>();        
        int loopCount = 0;
        for (String key : imageKey)
        {            
            loopImages.put(loopCount, images.get(key));
            loopCount++;
        } 
        setBackground();
        setTopImage();
        setMiddleImage();
        setBottomImage();
        Random randomQuestion = new Random();
        ArrayList questions = new ArrayList();
        questions.add("What is on the left?");
        questions.add("What is in the middle?");
        questions.add("What is on the right?");       
        int randomNumber = randomQuestion.nextInt(questions.size());
        while (randomNumber==previousNumber)
        {
            randomNumber = randomQuestion.nextInt(questions.size());
        }
        String selectedQuestion = questions.get(randomNumber).toString();       
        question_label.setText(selectedQuestion);
        previousNumber = randomNumber;
        question_label.setFont(new java.awt.Font("Dialog", 0, 30));
        
    }//GEN-LAST:event_next_buttonActionPerformed
    private void setBackground()
    {        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice gs = ge.getDefaultScreenDevice();
        DisplayMode dm = gs.getDisplayMode();
        int screenWidth = dm.getWidth()-5;
        int screenHeight = dm.getHeight()-5;
        this.setExtendedState(JFrame.MAXIMIZED_BOTH); 
        this.setVisible(true);
        this.setLayout(new BorderLayout());
        backgroundPanel.setSize(screenWidth, screenHeight);
       this.add(backgroundPanel, BorderLayout.CENTER);
        images = new HashMap<>();
        imageDirectory = "background";
        images =Coordinator.ScienceGetImages("/resources/images/"+imageDirectory);   
        System.out.println(images.size());
        Set<String> imageKey = images.keySet();
        loopImages = new HashMap<>();        
        int loopCount = 0;
        for (String key : imageKey)
        {            
            loopImages.put(loopCount, images.get(key));
            loopCount++;
        } 
        Random randomTop = new Random();
        topNumber = randomTop.nextInt(images.size());
        while (topNumber>8)
        {
        topNumber = randomTop.nextInt(images.size());
        }
        String imageFileName = loopImages.get(topNumber);
          backgroundPanel = new PaintImage("/resources/images/"+imageDirectory+"/"+imageFileName);
          backgroundPanel.setSize(screenWidth, screenHeight);

    }
        private void setTopImage()
    {

           Random randomTop = new Random();
        topNumber = randomTop.nextInt(images.size());
        while (topNumber>8)
        {
        topNumber = randomTop.nextInt(images.size());
        }
        System.out.println(topNumber);

            String imageFileName = loopImages.get(topNumber);
            String[] imageName = imageFileName.split("\\.");
            imageIcon = new javax.swing.ImageIcon(getClass().getResource("/resources/images/science/"+imageDirectory+"/"+imageFileName));
            int height = top_image.getHeight();
            int width = top_image.getWidth();
            //get the image
            Image image = imageIcon.getImage();
            //transform it
            Image newimg = image.getScaledInstance(height-5, width-5,  java.awt.Image.SCALE_SMOOTH);
            //get the new image
            imageIcon = new ImageIcon(newimg);
            top_image.setIcon(imageIcon);    
            
    }
    private void setMiddleImage()
    {
        Random randomMiddle = new Random();
        middleNumber = randomMiddle.nextInt(loopImages.size());
        while (middleNumber==topNumber || middleNumber>10)
        {
            middleNumber = randomMiddle.nextInt(loopImages.size());
        }
        System.out.println(middleNumber);
            String imageFileName = loopImages.get(middleNumber);
            String[] imageName = imageFileName.split("\\.");
            imageIcon = new javax.swing.ImageIcon(getClass().getResource("/resources/images/science/"+imageDirectory+"/"+imageFileName));
            int height = top_image.getHeight();
            int width = top_image.getWidth();
            //get the image
            Image image = imageIcon.getImage();
            //transform it
            Image newimg = image.getScaledInstance(height-5, width-5,  java.awt.Image.SCALE_SMOOTH);
            //get the new image
            imageIcon = new ImageIcon(newimg);
            middle_image.setIcon(imageIcon);   
    }
    
    private void setBottomImage()
    {
        Random randomBottom = new Random();
        bottomNumber = randomBottom.nextInt(loopImages.size());
        while (bottomNumber==topNumber || bottomNumber>10 || bottomNumber==middleNumber)
        {
            bottomNumber = randomBottom.nextInt(loopImages.size());
        }
        System.out.println(bottomNumber);
            String imageFileName = loopImages.get(bottomNumber);
            String[] imageName = imageFileName.split("\\.");
            imageIcon = new javax.swing.ImageIcon(getClass().getResource("/resources/images/science/"+imageDirectory+"/"+imageFileName));
            int height = top_image.getHeight();
            int width = top_image.getWidth();
            //get the image
            Image image = imageIcon.getImage();
            //transform it
            Image newimg = image.getScaledInstance(height-5, width-5,  java.awt.Image.SCALE_SMOOTH);
            //get the new image
            imageIcon = new ImageIcon(newimg);
            bottom_image.setIcon(imageIcon);   
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BesideNextTo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BesideNextTo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BesideNextTo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BesideNextTo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BesideNextTo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JLabel bottom_image;
    private javax.swing.JLabel middle_image;
    private javax.swing.JButton next_button;
    private javax.swing.JLabel question_label;
    private javax.swing.JLabel top_image;
    // End of variables declaration//GEN-END:variables
}
